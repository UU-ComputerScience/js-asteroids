\chapter{Conclusion, Contributions \& Future Work}
\label{chap:conclusion}

Research question: \emph{how can we make wxHaskell run in the web browser?}

To answer the research question we have explored the different paths that could potentially lead to a proof of concept implementation of wxHaskell for the web. Of these paths we picked the least obvious and most challenging one, developed the necessary tools, and applied them to successfully port a feature-light version of \emph{wxAsteroids} which is \emph{near to} interchangeable with the desktop version\footnote{\url{https://github.com/rubendg/wxasteroids}}. To the best of our knowledge we are also the first to actually implement a real-world OO design in Haskell.

Besides the implementation of a subset of wxHaskell we contribute two independently useful libraries: an extended \js programming prelude\footnote{\url{https://github.com/UU-ComputerScience/uhc-js}}, and a light-weight approach for OO programming in Haskell inspired by OOHaskell which only requires Haskell 98 plus some lifting of type class restrictions\footnote{\url{https://github.com/rubendg/lightoo}}. Almost all code snippets in this thesis can be found at \footnote{\url{https://github.com/rubendg/thesis-snippets}}. 

From the discussions and conclusions of chapter 4, 5, and 6 it should be clear that in order for the wxWidgets implementation in Haskell to be of any real use there is still lots of work to be done. Also, some inherent limitations of the Haskell language such as the lack of first-class language support for extensible records and mutually recursive modules makes OO programming in Haskell feel a bit like a hack. It would be interesting to see if there exists a translation from feather-weight Java to our OO library as it would open up the possibility of creating a small language extension to hide the crufty details, and may even be able to work around the lack of an uniform treatment of subtyping in our encoding by inserting explicit casts at the required places. For all practical purposes, if the \js FFI keeps on improving, design option B remains the most practical approach to implement a fully fledged port of wxHaskell for the web. 
